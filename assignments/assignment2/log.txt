Alex Chen
005299047
Assignment 2
Lab

------------

1) Secure Shell to the SEAS linux server (09, acting as my client)
	[ssh -X lichy@lnxsrv09.seas.ucla.edu]

Following steps are to enable key-based authentication rather than password based authentication, when ssh-ing from one SEAS server to another (daisy-chain connection).

2) Generate public and private key pair on client
	[ssh-keygen]
		- save key to ~./.ssh/id_rsa
		- set passphrase (enter twice to confirm)

3) Copy public key to a different SEAS server (linux server 07)
	[ssh-copy-id -i lichy@lnxsrv07.seas.ucla.edu]
		- enter password to lichy@lnxsrv07.seas.ucla.edu

At this point, the password entered upon creating the key pair will be required for any connection from a SEAS server to another SEAS server, as your private key is still protected.

However, adding your private key to ssh-agent will solve this as OpenSSH will talk to your ssh-agent daemon to retrieve the password.

4) Add private key from client (linux server 09) to ssh-agent, first evaluating authenticity of ssh-agent
	[ eval `ssh-agent`], [ssh-add]
		- enter password that is protecting private key

Now connecting from one SEAS server (acting as client) to another SEAS server requires a password that is automatically provided by my ssh-agent daemon.

With this, convenient "daisy-chain" connections can be made. If I need to 
connect to server2 through server1, then I can run the command
[ssh -At user@server1 ssh -A user@server2] - No intermediary passwords are 
needed!

The -A flag is for "agent forwarding." If I am connecting from server0 to 
server2, through server1, then the -A flag would forward the ssh 
authentication agent from server0 where it exists, to server1. server1 then 
can be authenticated because it now can provide the private key to server2's 
challenge. Note that the public key generated/owned by server0 is passed 
along the way to server1 and server2, as part of the standard flow of 
client-server authentication.
