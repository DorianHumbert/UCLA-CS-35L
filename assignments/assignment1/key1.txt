Alex Chen
005299047
Assignment 1
Homework

------------

DEL = Delete


Exercise 1.1


1.

2. C-s H T M L Enter

3. C-s s c a v e n g e r Enter M-b

4. C-s s e l f - r e f e r e n t i a l Enter M-b M-b

5. C-s a r r o w Enter M-b

6. C-e

7. C-a

8. To accomplish traversing across a line of text in Emacs, there are two commands. [C-e] will bring the cursor to the end of the current line, while [C-a] will bring the cursor to the beginning of the current line.

9. No, I did not move the cursor using the arrow keys.

10. C-x C-s y


Exercise 1.2


1. 

2. M-g g 1 9 Enter C-k

3. C-s D E L Enter C-a C-k

4. C-s p e d i a C-s Enter M-h C-w Enter

5. C-s < ! - - Enter C-b C-b C-b C-b M-z > C-s - - > Enter C-n C-a C-x DEL C-x DEL C-x DEL C-s < ! Enter C-a C-k


Exercise 1.3


1. 

2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter y y Enter

3. M-< M-% U T F - 8 Enter U S - A S C I I Enter y Enter

4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-k

5. M-< C-s < / o l > C-o

6. C-x C-s C-x C-c d i f f SP - u SP e x e r 1 . h t m l SP e x e r 3 . h t m l SP > e x e r 3 . d i f f Enter


Exercise 1.4


1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l Enter

2. 

3.

(comment coming after html end tag)

M-> C-r < ! Enter C-SP C-e M-w C-r < / h t m l > C-r C-n C-y Enter

4.

(comments after "should output nothing")

M-> C-r < ! C-r Enter C-SP C-n C-n C-n C-e M-w C-r s h o u l d SP o u t p u t C-r Enter C-e Enter C-y

M-> C-r < ! C-r C-r Enter C-SP C-f C-f C-f C-f C-f C-f C-f M-w C-r o u t p u t n o t h i n g C-r Enter C-s . Enter C-b C-y


("You can learn more about HTML comments")

M-> C-r < ! C-r C-r C-r C-SP C-n C-n C-e M-w C-r S u b m i t < C-r C-e Enter Enter C-y


(DELETE-ME)

M-> C-r < ! C-r C-r C-r C-r C-SP C-e M-w C-r t o SP u s e SP E m a c s < C-r C-n C-n C-y


(chinese comments)

M-> C-r < ! C-r C-r C-r C-r C-r C-SP C-n C-n C-e M-w C-r h u n t < C-r C-n C-n C-y


5. C-s - - - SP e x e C-a C-SP M-> DEL

6. C-x u

7. - - > C-r - - - SP e x e C-a < ! - - SP M-% < ! - - Enter ( c o m m e n t ) Enter y y y y y y C-r - - - SP e x e Enter M-% - - > Enter ( c o m m e n t ) Enter y y y y y y Enter

8. M-< M-% < o l > Enter < o L > enter !

(There were seven occurences of "<ol>".)

9. C-x C-s C-x C-c d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f Enter


Exercise 1.5


1. C-x d Enter + j u n k Enter

2. Enter C-x C-f h e l l o . c Enter

(copy and paste block of code)

3. M-x c o m p i l e Enter h e l l o Enter

4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter

5. C-SP C-e M-w C-x C-f . . / D e s k t o p / c s 3 5 l / a s s i g n m e n t 1 / k e y 1 . t x t Enter M-> C-y

hello.c program output: "EOF on input"


Exercise 1.6


1. C-x b Enter

2.
INPUT:
( f o r m a t SP " % x " SP m o s t - n e g a t i v e - f i x n u m ) C-j

OUTPUT:
"-2305843009213693952"

INPUT:
( f o r m a t SP " % x " SP m o s t - n e g a t i v e - f i x n u m ) C-j

OUTPUT:
"1fffffffffffffff"

Based on these two corresponding outputs, these values represent the lowest and highest integers that can be represented, in 30 bits, in two's complement format. The largest negative integer has a 20 as the most significant byte. Thus, this corresponds to "0010 0000" as the most significant byte. The largest positive integer has 1f as the most significant byte, which corresponds to "0001 1111" as the most significant byte. The two most significant bits can be disregarded; then, the format represents the largest and smallest integers represented by 30 bits in two's complement format, with the 30th bit being the sign bit.

3.
INPUT:
( r a n d o m SP " 0 0 5 - 2 9 9 - 0 4 7 " ) C-j

OUTPUT:
-904054565511011593

4.
INPUT:
( s e t q SP x SP ( r a n d o m ) ) C-j

OUTPUT (x):
-1120488287550806330

INPUT:
( s e t q SP y SP ( r a n d o m ) ) C-j

OUTPUT (y):
-2008992145919254103

5.
INPUT:
( s e t q SP p SP ( * SP x SP y ) ) C-j

OUTPUT (p):
-972875746318491978

INPUT:
( s e t q SP r SP ( l o g i o r SP p SP m o s t - n e g a t i v e - f i x n u m ) )

OUTPUT (r):
-972875746318491978

6. r is not the mathematical product of x and y.

7. x and y are not truly random in the mathematical sense. In the Emacs documentation about the random integers generated by the random command, it is stated that Emacs generates "pseudo-random" numbers that are initialized from a "seed value," and starting at that seed will result in the same random integers. If the random number generation can be duplicated, then the numbers are not truly random.

8. If (random) is truly random, the r value will be the mathematically correct product of the two integers only when overflow does not occur. Because Emacs represents integers with 30 bits, in which the 30th bit is the sign bit, overflow will occur if the mathematical product of x and y is greater than 2^29-1 or less than -2^29. There are many different combinations of x and y, including taking into account the signs of x and y, that will cause overflow to occur. One special case is when x and y are both positive and are both greater than 2^15 (2^15 * 2^15 = 2^30 and 2^30 > (2^29 - 1)). The probability of x and y each being larger than 2^15 is ((2^29 - 1) - 2^15) / (2^29 - 1). This calculates the ratio of the amount of values larger than 2^15, but smaller than 2^29 - 1, to the amount of values in the range from 0 to 2^29 - 1. This probability is 0.9999. Squaring this by itself essentially retains the same value. Therefore, this is a lower bound on the probability of the product of x and y falling outside of the range of integers that can be represented in Emacs. Because this probability is already so large, the probability that r is the mathematically correct product of two integers in Emacs is extremely small (0).